{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"fastapi-code-generator","text":"<p>This code generator creates a FastAPI app from an openapi file.</p> <p> </p>"},{"location":"#this-project-is-in-experimental-phase","title":"This project is in experimental phase.","text":"<p>fastapi-code-generator uses datamodel-code-generator to generate pydantic models</p>"},{"location":"#help","title":"Help","text":"<p>See documentation for more details.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install <code>fastapi-code-generator</code>:</p> <pre><code>$ pip install fastapi-code-generator\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>The <code>fastapi-code-generator</code> command:</p> <pre><code>Usage: fastapi-codegen [OPTIONS]\n\nOptions:\n  -i, --input FILENAME     [required]\n  -o, --output PATH        [required]\n  -t, --template-dir PATH\n  -m, --model-file         Specify generated model file path + name, if not default to models.py\n  -r, --generate-routers   Generate modular api with multiple routers using RouterAPI (for bigger applications).\n  --specify-tags           Use along with --generate-routers to generate specific routers from given list of tags.\n  -c, --custom-visitors    PATH - A custom visitor that adds variables to the template.\n  -d, --output-model-type  Specify a Pydantic base model to use (see [datamodel-code-generator](https://github.com/koxudaxi/datamodel-code-generator); default is `pydantic.BaseModel`).\n  -p, --python-version     Specify a Python version to target (default is `3.9`).\n  --install-completion     Install completion for the current shell.\n  --show-completion        Show completion for the current shell, to copy it\n                           or customize the installation.\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"#pydantic-2-support","title":"Pydantic 2 support","text":"<p>Specify the Pydantic 2 <code>BaseModel</code> version in the command line, for example:</p> <pre><code>$ fastapi-codegen --input api.yaml --output app --output-model-type pydantic_v2.BaseModel\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#openapi","title":"OpenAPI","text":"<pre><code>$ fastapi-codegen --input api.yaml --output app\n</code></pre> api.yaml <pre>\n<code>\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n                x-amazon-apigateway-integration:\n                  uri:\n                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\n                  passthroughBehavior: when_no_templates\n                  httpMethod: POST\n                  type: aws_proxy\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n                x-amazon-apigateway-integration:\n                  uri:\n                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\n                  passthroughBehavior: when_no_templates\n                  httpMethod: POST\n                  type: aws_proxy\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    x-amazon-apigateway-integration:\n      uri:\n        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations\n      passthroughBehavior: when_no_templates\n      httpMethod: POST\n      type: aws_proxy\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    Pets:\n      type: array\n      description: list of pet\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n</code>\n</pre> <p><code>app/main.py</code>:</p> <pre><code># generated by fastapi-codegen:\n#   filename:  api.yaml\n#   timestamp: 2020-06-14T10:45:22+00:00\n\nfrom __future__ import annotations\n\nfrom typing import Optional\n\nfrom fastapi import FastAPI, Query\n\nfrom .models import Pets\n\napp = FastAPI(version=\"1.0.0\", title=\"Swagger Petstore\", license=\"{'name': 'MIT'}\",)\n\n\n@app.get('/pets', response_model=Pets)\ndef list_pets(limit: Optional[int] = None) -&gt; Pets:\n    \"\"\"\n    List all pets\n    \"\"\"\n    pass\n\n\n@app.post('/pets', response_model=None)\ndef create_pets() -&gt; None:\n    \"\"\"\n    Create a pet\n    \"\"\"\n    pass\n\n\n@app.get('/pets/{pet_id}', response_model=Pets)\ndef show_pet_by_id(pet_id: str = Query(..., alias='petId')) -&gt; Pets:\n    \"\"\"\n    Info for a specific pet\n    \"\"\"\n    pass\n</code></pre> <p><code>app/models.py</code>:</p> <pre><code># generated by datamodel-codegen:\n#   filename:  api.yaml\n#   timestamp: 2020-06-14T10:45:22+00:00\n\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel, Field\n\n\nclass Pet(BaseModel):\n    id: int\n    name: str\n    tag: Optional[str] = None\n\n\nclass Pets(BaseModel):\n    __root__: List[Pet] = Field(..., description='list of pet')\n\n\nclass Error(BaseModel):\n    code: int\n    message: str\n</code></pre>"},{"location":"#custom-template","title":"Custom Template","text":"<p>If you want to generate custom <code>*.py</code> files then you can give a custom template directory to fastapi-code-generator with <code>-t</code> or <code>--template-dir</code> options of the command.</p> <p>fastapi-code-generator will search for jinja2 template files in given template directory, for example <code>some_jinja_templates/list_pets.py</code>.</p> <pre><code>fastapi-code-generator --template-dir some_jinja_templates --output app --input api.yaml\n</code></pre> <p>These files will be rendered and written to the output directory. Also, the generated file names will be created with the template name and extension of <code>*.py</code>, for example <code>app/list_pets.py</code> will be a separate file generated from the jinja template alongside the default <code>app/main.py</code></p>"},{"location":"#variables","title":"Variables","text":"<p>You can use the following variables in the jinja2 templates</p> <ul> <li><code>imports</code>  all imports statements</li> <li><code>info</code>  all info statements</li> <li><code>operations</code> <code>operations</code> is list of <code>operation</code></li> <li><code>operation.type</code> HTTP METHOD</li> <li><code>operation.path</code> Path</li> <li><code>operation.snake_case_path</code> Snake-cased Path</li> <li><code>operation.response</code> response object</li> <li><code>operation.function_name</code> function name is created <code>operationId</code> or <code>METHOD</code> + <code>Path</code> </li> <li><code>operation.snake_case_arguments</code> Snake-cased function arguments</li> <li><code>operation.security</code> Security</li> <li><code>operation.summary</code> a summary</li> <li><code>operation.tags</code> Tags</li> </ul>"},{"location":"#default-template","title":"default template","text":"<p><code>main.jinja2</code></p> <pre><code>from __future__ import annotations\n\nfrom fastapi import FastAPI\n\n{{imports}}\n\napp = FastAPI(\n    {% if info %}\n    {% for key,value in info.items() %}\n    {{ key }} = \"{{ value }}\",\n    {% endfor %}\n    {% endif %}\n    )\n\n\n{% for operation in operations %}\n@app.{{operation.type}}('{{operation.snake_case_path}}', response_model={{operation.response}})\ndef {{operation.function_name}}({{operation.snake_case_arguments}}) -&gt; {{operation.response}}:\n    {%- if operation.summary %}\n    \"\"\"\n    {{ operation.summary }}\n    \"\"\"\n    {%- endif %}\n    pass\n{% endfor %}\n</code></pre>"},{"location":"#modular-template","title":"modular template","text":"<p><code>modular_template/main.jinja2</code>:</p> <pre><code>from __future__ import annotations\n\nfrom fastapi import FastAPI\n\nfrom .routers import {{ routers | join(\", \") }}\n\napp = FastAPI(\n    {% if info %}\n    {% for key,value in info.items() %}\n    {% set info_value= value.__repr__() %}\n    {{ key }} = {{info_value}},\n    {% endfor %}\n    {% endif %}\n    )\n\n{% for router in routers -%}\napp.include_router({{router}}.router)\n{% endfor -%}\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Gateway of the App\"}\n</code></pre> <p><code>modular_template/routers.jinja2</code>:</p> <pre><code>from __future__ import annotations\n\nfrom fastapi import APIRouter\nfrom fastapi import FastAPI\n\nfrom ..dependencies import *\n\nrouter = APIRouter(\n    tags=['{{tag}}']\n    )\n\n{% for operation in operations %}\n{% if operation.tags[0] == tag %}\n@router.{{operation.type}}('{{operation.snake_case_path}}', response_model={{operation.response}}\n    {% if operation.additional_responses %}\n        , responses={\n            {% for status_code, models in operation.additional_responses.items() %}\n                '{{ status_code }}': {\n                {% for key, model in models.items() %}\n                    '{{ key }}': {{ model }}{% if not loop.last %},{% endif %}\n                {% endfor %}\n                }{% if not loop.last %},{% endif %}\n            {% endfor %}\n        }\n    {% endif %}\n    {% if operation.tags%}\n    , tags={{operation.tags}}\n    {% endif %})\ndef {{operation.function_name}}({{operation.snake_case_arguments}}) -&gt; {{operation.return_type}}:\n    {%- if operation.summary %}\n    \"\"\"\n    {{ operation.summary }}\n    \"\"\"\n    {%- endif %}\n    pass\n{% endif %}\n{% endfor %}\n</code></pre> <p><code>modular_template/dependencies.jinja2</code>:</p> <pre><code>{{imports}}\n</code></pre>"},{"location":"#custom-visitors","title":"Custom Visitors","text":"<p>Custom visitors allow you to pass custom variables to your custom templates.</p> <p>E.g.</p>"},{"location":"#custom-template_1","title":"custom template","text":"<p><code>custom-template.jinja2</code></p> <pre><code>#{ % custom_header %}\nfrom __future__ import annotations\n\nfrom fastapi import FastAPI\n\n...\n</code></pre>"},{"location":"#custom-visitor","title":"custom visitor","text":"<p><code>custom-visitor.py</code></p> <pre><code>from typing import Dict, Optional\n\nfrom fastapi_code_generator.parser import OpenAPIParser\nfrom fastapi_code_generator.visitor import Visitor\n\n\ndef custom_visitor(parser: OpenAPIParser, model_path: Path) -&gt; Dict[str, object]:\n    return {'custom_header': 'My header'}\n\n\nvisit: Visitor = custom_visitor\n</code></pre>"},{"location":"#multiple-files-using-apirouter-for-bigger-applications","title":"Multiple Files using APIRouter (For Bigger Applications)","text":"<pre><code>\u251c\u2500\u2500 app                      # \"app\" is a Root directory      \n\u2502   \u251c\u2500\u2500 main.py              # \"main\" module\n\u2502   \u251c\u2500\u2500 models.py            # \"models\" of the application\n\u2502   \u251c\u2500\u2500 dependencies.py      # \"dependencies\" module, e.g. import app.dependencies\n\u2502   \u2514\u2500\u2500 routers              # \"routers\" is a \"app subpackage\"\n\u2502       \u251c\u2500\u2500 fat_cats.py      # \"fat_cats\" submodule, e.g. import app.routers.fat_cats\n\u2502       \u251c\u2500\u2500 slim_dogs.py     # \"slim_dogs\" submodule, e.g. import app.routers.slim_dogs\n\u2502       \u2514\u2500\u2500 wild_boars.py    # \"wild_boars\" submodule, e.g. import app.routers.wild_boars\n</code></pre> <p>See documentation of APIRouter OpenAPI for more details.</p> <p>Generate main aside with all of its routers:</p> <pre><code>$ fastapi-codegen --input swagger.yaml --output app --generate-routers\n</code></pre> <p>Regenerate specific routers:</p> <pre><code>$ fastapi-codegen --input swagger.yaml --output app --generate-routers --specify-tags \"Wild Boars, Fat Cats\"\n</code></pre> swagger.yaml <pre>\n<code>\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: /\n  - url: http://petstore.swagger.io/v1\n  - url: http://localhost:8080/\npaths:\n  /boars:\n    get:\n      summary: List All Wild Boars\n      operationId: listWildBoars\n      tags:\n        - Wild Boars\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: An array of wild boars\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WildBoars\"\n    post:\n      summary: Create a Wild Boar\n      operationId: createWildBoars\n      tags:\n        - Wild Boars\n      responses:\n        '201':\n          description: Null response\n  /boars/{boarId}:\n    get:\n      summary: Info For a Specific Boar\n      operationId: showBoarById\n      tags:\n        - Wild Boars\n      parameters:\n        - name: boarId\n          in: path\n          required: true\n          description: The id of the boar to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n  /cats:\n    get:\n      summary: List All Fat Cats\n      operationId: listFatCats\n      tags:\n        - Fat Cats\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: An array of fat cats\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FatCats\"\n    post:\n      summary: Create a Fat Cat\n      operationId: createFatCats\n      tags:\n        - Fat Cats\n      responses:\n        '201':\n          description: Null response\n  /cats/{catId}:\n    get:\n      summary: Info For a Specific Cat\n      operationId: showCatById\n      tags:\n        - Fat Cats\n      parameters:\n        - name: catId\n          in: path\n          required: true\n          description: The id of the cat to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n  /dogs:\n    get:\n      summary: List All Slim Dogs\n      operationId: listSlimDogs\n      tags:\n        - Slim Dogs\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: An array of slim dogs\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SlimDogs\"\n    post:\n      summary: Create a Slim Dog\n      operationId: createSlimDogs\n      tags:\n        - Slim Dogs\n      responses:\n        '201':\n          description: Null response\n  /dogs/{dogId}:\n    get:\n      summary: Info For a Specific Dog\n      operationId: showDogById\n      tags:\n        - Slim Dogs\n      parameters:\n        - name: dogId\n          in: path\n          required: true\n          description: The id of the dog to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\ncomponents:\n  schemas:\n    Pet:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        tag:\n          type: string\n    FatCats:\n      type: array\n      description: list of fat cats\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    SlimDogs:\n      type: array\n      description: list of slim dogs\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    WildBoars:\n      type: array\n      description: list of wild boars\n      items:\n        $ref: \"#/components/schemas/Pet\"\n</code>\n</pre> <p><code>app/main.py</code>:</p> <pre><code># generated by fastapi-codegen:\n#   filename:  swagger.yaml\n#   timestamp: 2023-04-04T12:06:16+00:00\n\nfrom __future__ import annotations\n\nfrom fastapi import FastAPI\n\nfrom .routers import fat_cats, slim_dogs, wild_boars\n\napp = FastAPI(\n    version='1.0.0',\n    title='Swagger Petstore',\n    license={'name': 'MIT'},\n    servers=[\n        {'url': '/'},\n        {'url': 'http://petstore.swagger.io/v1'},\n        {'url': 'http://localhost:8080/'},\n    ],\n)\n\napp.include_router(fat_cats.router)\napp.include_router(slim_dogs.router)\napp.include_router(wild_boars.router)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Gateway of the App\"}\n</code></pre> <p><code>app/models.py</code>:</p> <pre><code># generated by fastapi-codegen:\n#   filename:  swagger.yaml\n#   timestamp: 2023-04-04T12:06:16+00:00\n\nfrom __future__ import annotations\n\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel, Field\n\n\nclass Pet(BaseModel):\n    id: int\n    name: str\n    tag: Optional[str] = None\n\n\nclass FatCats(BaseModel):\n    __root__: List[Pet] = Field(..., description='list of fat cats')\n\n\nclass SlimDogs(BaseModel):\n    __root__: List[Pet] = Field(..., description='list of slim dogs')\n\n\nclass WildBoars(BaseModel):\n    __root__: List[Pet] = Field(..., description='list of wild boars')\n</code></pre> <p><code>app/routers/fat_cats.py</code>:</p> <pre><code># generated by fastapi-codegen:\n#   filename:  swagger.yaml\n#   timestamp: 2023-04-04T12:06:16+00:00\n\nfrom __future__ import annotations\n\nfrom fastapi import APIRouter\n\nfrom ..dependencies import *\n\nrouter = APIRouter(tags=['Fat Cats'])\n\n\n@router.get('/cats', response_model=FatCats, tags=['Fat Cats'])\ndef list_fat_cats(limit: Optional[int] = None) -&gt; FatCats:\n    \"\"\"\n    List All Fat Cats\n    \"\"\"\n    pass\n\n\n@router.post('/cats', response_model=None, tags=['Fat Cats'])\ndef create_fat_cats() -&gt; None:\n    \"\"\"\n    Create a Fat Cat\n    \"\"\"\n    pass\n\n\n@router.get('/cats/{cat_id}', response_model=Pet, tags=['Fat Cats'])\ndef show_cat_by_id(cat_id: str = Path(..., alias='catId')) -&gt; Pet:\n    \"\"\"\n    Info For a Specific Cat\n    \"\"\"\n    pass\n</code></pre> <p><code>app/routers/slim_dogs.py</code>:</p> <pre><code># generated by fastapi-codegen:\n#   filename:  swagger.yaml\n#   timestamp: 2023-04-04T12:06:16+00:00\n\nfrom __future__ import annotations\n\nfrom fastapi import APIRouter\n\nfrom ..dependencies import *\n\nrouter = APIRouter(tags=['Slim Dogs'])\n\n\n@router.get('/dogs', response_model=SlimDogs, tags=['Slim Dogs'])\ndef list_slim_dogs(limit: Optional[int] = None) -&gt; SlimDogs:\n    \"\"\"\n    List All Slim Dogs\n    \"\"\"\n    pass\n\n\n@router.post('/dogs', response_model=None, tags=['Slim Dogs'])\ndef create_slim_dogs() -&gt; None:\n    \"\"\"\n    Create a Slim Dog\n    \"\"\"\n    pass\n\n\n@router.get('/dogs/{dog_id}', response_model=Pet, tags=['Slim Dogs'])\ndef show_dog_by_id(dog_id: str = Path(..., alias='dogId')) -&gt; Pet:\n    \"\"\"\n    Info For a Specific Dog\n    \"\"\"\n    pass\n</code></pre> <p><code>app/routers/wild_boars.py</code>:</p> <pre><code># generated by fastapi-codegen:\n#   filename:  swagger.yaml\n#   timestamp: 2023-04-04T12:06:16+00:00\n\nfrom __future__ import annotations\n\nfrom fastapi import APIRouter\n\nfrom ..dependencies import *\n\nrouter = APIRouter(tags=['Wild Boars'])\n\n\n@router.get('/boars', response_model=WildBoars, tags=['Wild Boars'])\ndef list_wild_boars(limit: Optional[int] = None) -&gt; WildBoars:\n    \"\"\"\n    List All Wild Boars\n    \"\"\"\n    pass\n\n\n@router.post('/boars', response_model=None, tags=['Wild Boars'])\ndef create_wild_boars() -&gt; None:\n    \"\"\"\n    Create a Wild Boar\n    \"\"\"\n    pass\n\n\n@router.get('/boars/{boar_id}', response_model=Pet, tags=['Wild Boars'])\ndef show_boar_by_id(boar_id: str = Path(..., alias='boarId')) -&gt; Pet:\n    \"\"\"\n    Info For a Specific Boar\n    \"\"\"\n    pass\n</code></pre> <p><code>app/dependencies.py</code>:</p> <pre><code># generated by fastapi-codegen:\n#   filename:  swagger.yaml\n#   timestamp: 2023-04-04T12:06:16+00:00\n\nfrom __future__ import annotations\n\nfrom typing import Optional\n\nfrom fastapi import Path\n\nfrom .models import FatCats, Pet, SlimDogs, WildBoars\n</code></pre>"},{"location":"#pypi","title":"PyPi","text":"<p>https://pypi.org/project/fastapi-code-generator</p>"},{"location":"#license","title":"License","text":"<p>fastapi-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license</p>"},{"location":"development-contributing/","title":"Development","text":"<p>Install the package in editable mode:</p> <pre><code>$ git clone git@github.com:koxudaxi/fastapi-code-generator.git\n$ poetry install fastapi-code-generator\n</code></pre>"},{"location":"development-contributing/#contribute","title":"Contribute","text":"<p>We are waiting for your contributions to <code>fastapi-code-generator</code>.</p>"},{"location":"development-contributing/#how-to-contribute","title":"How to contribute","text":"<pre><code>## 1. Clone your fork repository\n$ git clone git@github.com:&lt;your username&gt;/fastapi-code-generator.git\n$ cd fastapi-code-generator\n\n## 2. Install [poetry](https://github.com/python-poetry/poetry)\n$ curl -sSL curl -sSL https://install.python-poetry.org | python3 -\n\n## 3. Install dependencies\n$ poetry install\n\n## 4. Create new branch and rewrite code.\n$ git checkout -b new-branch\n\n## 5. Run unittest (you should pass all test and coverage should be 100%)\n$ ./scripts/test.sh\n\n## 6. Format code\n$ ./scripts/format.sh\n\n## 7. Check lint (mypy)\n$ ./scripts/lint.sh\n\n## 8. Commit and Push...\n</code></pre>"}]}